/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'pmd'
   // id 'edu.odu.cs.report_accumulator' version '1.4'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

//source compatibility and target 
java {
    //sourceCompatibility = JavaVersion.VERSION_11
    //targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    //used open csv to import file
    implementation 'com.opencsv:opencsv:5.1'

    //used Apache POI for excel file
    implementation 'org.apache.poi:poi:5.2.0'

    //Add the Apache POI XSSF dependency
    implementation 'org.apache.poi:poi-ooxml:5.1.0'


}

application {
    // Define the main class for the application.
    mainClass = 'edu.odu.cs.cs350.pne.app'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    ignoreFailures = true
    useJUnitPlatform()
}

application { //Allows  ./gradlew run --args=path-to-test-data
    mainClass = 'edu.odu.cs.pne.Driver'
}

task copyDocs (type: Copy, dependsOn: javadoc) {
    from 'build/docs'
    into 'build/reports'
}

check.dependsOn copyDocs


task reports(type: Copy) {
    dependsOn 'build'
    from "src/main/html"
    into "build/reports"
}



task gstatus (type: Exec) {
    workingDir = '.'
    commandLine = ['git', 'status']
}



def pagesDir = file("${project.rootDir}/../website-temp").absolutePath


task clearPages(type: Delete) {
    delete pagesDir
}



task workTree(dependsOn: ['clearPages']) { 
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'workTree']) {
    from 'build/reports'
    into pagesDir
}

task copyWebsite (dependsOn: ['copyReports']) {
}

task commitWebsite (dependsOn: 'copyWebsite') {
    doLast {
        Date now = new Date()

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', pagesDir]
            ignoreExitValue = true
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'commit', '-m', 'Updating webpages at ' + now.toString()]
            ignoreExitValue = true
        }
    }
}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports(type: Delete, dependsOn: 'pushWebsite'){
    dependsOn 'reports'
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    delete pagesDir

}

//reportStats {
	//reportsURL = 'https://project/reports/url/'
    //htmlSourceDir = file('src/main/html')  // default value
   // reportsDir = file('build/reports') // default value
   // buildID = "12345" 
//}

pmd {
    ignoreFailures = true
    consoleOutput = false
}
pmdTest.enabled = false